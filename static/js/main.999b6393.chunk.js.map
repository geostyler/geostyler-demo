{"version":3,"sources":["assets/logo.svg","ExamplesDialog.tsx","App.tsx","index.tsx"],"names":["ExamplesDialog","props","onExampleClicked","evt","element","target","selectedStyleId","parseInt","dataset","id","setState","onOk","onOkClicked","state","exampleStyles","selectedExampleStyle","find","exampleStyle","style","name","description","circle","nestedFilter","zoomBasedPoint","alternatingLine","populationQuantiles","raster","locale","examples","GsLocale","en_US","this","visible","passThroughProps","cards","map","className","data-id","onClick","title","onCancel","React","defaultProps","componentName","RadioButton","Radio","Button","RadioGroup","Group","App","_sldStyleParser","SldStyleParser","_sldStyleParserSE","sldVersion","_geoJsonParser","GeoJsonParser","_shapefileParser","ShapefileParser","_wfsParser","WfsParser","onLangChange","e","value","moment","graphicalEditor","codeEditor","previewMap","language","compact","de_DE","es_ES","zh_CN","onRuleRendererChange","ruleRendererType","onCompactSwitchChange","onExamplesButtonClicked","examplesModalVisible","onExampleSelected","rules","symbolizers","kind","wellKnownName","data","src","logo","alt","layout","Item","label","onChange","defaultValue","checked","parsers","onStyleRead","onDataRead","onStyleChange","sldRendererProps","wmsBaseUrl","layer","defaultActiveKey","Panel","header","defaultParser","showSaveButton","showCopyButton","width","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.999b6393.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.5ea8ba0f.svg\";","import * as React from 'react';\n\nimport {\n  ConfigProvider,\n  Modal\n} from 'antd';\nimport { Locale } from 'antd/lib/locale-provider/index';\n\nimport './ExamplesDialog.css';\n\nimport circle from './assets/sample-styles/circle.json';\nimport nestedFilter from './assets/sample-styles/nested-filter.json';\nimport populationQuantiles from './assets/sample-styles/population-quantiles.json';\nimport zoomBasedPoint from './assets/sample-styles/zoom-based-point.json';\nimport alternatingLine from './assets/sample-styles/alternating-line.json';\nimport raster from './assets/sample-styles/raster.json';\n\nimport {\n  locale as GsLocale\n} from 'geostyler';\nimport { Style } from 'geostyler-style';\nimport { ModalProps } from 'antd/lib/modal';\n\ntype ExampleStyle = {\n  id: number,\n  name: string,\n  description?: string,\n  style: Style\n};\n\n// i18n\nexport interface ExamplesDialogLocale extends Locale {\n  examples: string;\n}\n\n// default props\ninterface ExamplesDialogDefaultProps extends Partial<ModalProps> {\n  visible: boolean;\n}\n\n// non default props\ninterface ExamplesDialogProps extends Partial<ExamplesDialogDefaultProps> {\n  onOkClicked: (style?: Style) => void;\n}\n\n// state\ninterface ExampleDialogState {\n  locale: ExamplesDialogLocale;\n  selectedStyleId?: number;\n  exampleStyles: ExampleStyle[];\n}\n\nclass ExamplesDialog extends React.Component<ExamplesDialogProps, ExampleDialogState> {\n\n  constructor(props: ExamplesDialogProps) {\n    super(props);\n    this.state = {\n      exampleStyles: [{\n        name: 'Basic Point',\n        id: 1,\n        description: '… the most simple example.',\n        style: circle as Style\n      }, {\n        name: 'Basic Point',\n        id: 2,\n        description: '… with a nested Filter',\n        style: nestedFilter as Style\n      }, {\n        name: 'Zoom based Point',\n        id: 3,\n        description: '… from GeoServer SLD Cookbook',\n        style: zoomBasedPoint as Style\n      },{\n        name: 'Alternating Line',\n        id: 4,\n        description: '… from GeoServer SLD Cookbook',\n        style: alternatingLine as Style\n      }, {\n        name: 'Classified Polygons',\n        id: 5,\n        description: '… for population. Created via classification tool.',\n        style: populationQuantiles as Style\n      }, {\n        name: 'Raster ColorMap',\n        id: 6,\n        description: '… with a multi-color gradient from GeoServer SLD Cookbook',\n        style: raster as Style\n      }],\n      locale: {\n        examples: 'Examples',\n        ...GsLocale.en_US\n      }\n    };\n  }\n\n  public static defaultProps: ExamplesDialogDefaultProps = {\n    visible: false,\n  };\n\n  public static componentName: string = 'ExamplesDialog';\n\n  onExampleClicked = (evt: React.MouseEvent<HTMLElement>) => {\n    const element: HTMLElement = evt.target as HTMLElement;\n    const selectedStyleId = parseInt(element.dataset.id as string, 10);\n    this.setState({selectedStyleId});\n  }\n\n  onOk = () => {\n    const {\n      onOkClicked\n    } = this.props;\n    const {\n      exampleStyles,\n      selectedStyleId\n    } = this.state;\n    const selectedExampleStyle = exampleStyles.find(exampleStyle => exampleStyle.id === selectedStyleId);\n    if (selectedExampleStyle && onOkClicked) {\n      onOkClicked(selectedExampleStyle.style);\n    }\n  }\n\n  public render() {\n    const {\n      visible,\n      onOkClicked,\n      ...passThroughProps\n    } = this.props;\n    const {\n      selectedStyleId,\n      exampleStyles,\n      locale\n    } = this.state;\n\n    const cards = exampleStyles!.map(exampleStyle => {\n      let className = 'example-card';\n      if (exampleStyle.id === selectedStyleId) {\n        className += ' selected';\n      }\n      return (\n        <div\n          data-id={exampleStyle.id}\n          className={className}\n          key={exampleStyle.name + exampleStyle.description}\n          onClick={this.onExampleClicked}\n          title={exampleStyle.description}\n        >\n          <span className=\"title\">{exampleStyle.name}</span>\n          <div className=\"description\">{exampleStyle.description}</div>\n        </div>\n      );\n    });\n\n    return (\n      <ConfigProvider locale={locale}>\n          <Modal\n            className=\"examples-dialog\"\n            {...passThroughProps}\n            title={locale.examples}\n            visible={visible}\n            onOk={this.onOk}\n            onCancel={() => onOkClicked()}\n          >\n            {cards}\n          </Modal>\n      </ConfigProvider>\n    );\n  }\n}\n\nexport default ExamplesDialog;\n","import * as React from 'react';\n\nimport {\n  Radio,\n  Switch,\n  Button,\n  Collapse,\n  Form\n} from 'antd';\nimport ConfigProvider from 'antd/lib/config-provider';\nimport { Locale } from 'antd/lib/locale-provider/index';\nimport * as moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/es';\n\nimport {\n  Style as GsStyle,\n  StyleParser as GsStyleParser\n} from 'geostyler-style';\n\nimport {\n  Data as GsData\n} from 'geostyler-data';\n\nimport GeoJsonParser from 'geostyler-geojson-parser';\nimport SldStyleParser from 'geostyler-sld-parser';\nimport ShapefileParser from 'geostyler-shapefile-parser';\nimport WfsParser from 'geostyler-wfs-parser';\n\nimport {\n  CodeEditor,\n  DataLoader,\n  locale as GsLocale,\n  Style,\n  StyleLoader,\n  PreviewMap\n} from 'geostyler';\n\nimport logo from './assets/logo.svg';\nimport './App.css';\nimport ExamplesDialog from './ExamplesDialog';\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\n// i18n\nexport interface AppLocale extends Locale {\n  graphicalEditor: string;\n  codeEditor: string;\n  previewMap: string;\n  language: string;\n  compact: string;\n  examples: string;\n}\n\n// default props\ninterface DefaultAppProps {\n  styleParsers: GsStyleParser[];\n}\n\n// non default props\ninterface AppProps extends Partial<DefaultAppProps> {\n}\n\n// state\ninterface AppState {\n  style: GsStyle;\n  data?: GsData;\n  locale: AppLocale;\n  compact: boolean;\n  ruleRendererType?: 'SLD' | 'OpenLayers';\n  examplesModalVisible: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n  private _sldStyleParser = new SldStyleParser();\n\n  private _sldStyleParserSE = new SldStyleParser({\n    sldVersion: '1.1.0'\n  });\n\n  private _geoJsonParser = new GeoJsonParser();\n\n  private _shapefileParser = new ShapefileParser();\n\n  private _wfsParser = new WfsParser();\n\n  constructor(props: AppProps) {\n    super(props);\n    this._sldStyleParserSE.title = 'SLD 1.1.0 - Symbology Encoding';\n    this.state = {\n      locale: {\n        graphicalEditor: 'Graphical Editor',\n        codeEditor: 'Code Editor',\n        previewMap: 'Preview Map',\n        language: 'Language',\n        compact: 'Compact',\n        examples: 'Examples',\n        ...GsLocale.en_US\n      },\n      compact: true,\n      ruleRendererType: 'SLD',\n      examplesModalVisible: false,\n      style: {\n        name: 'Demo Style',\n        rules: [{\n          name: 'Rule 1',\n          symbolizers: [{\n            kind: 'Mark',\n            wellKnownName: 'circle'\n          }]\n        }]\n      }\n    };\n  }\n\n  public static componentName: string = 'App';\n\n  onLangChange = (e: any) => {\n    switch (e.target.value) {\n      case 'en':\n        moment.locale('en');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Graphical Editor',\n            codeEditor: 'Code Editor',\n            previewMap: 'Preview Map',\n            language: 'Language',\n            compact: 'Compact',\n            examples: 'Examples',\n            ...GsLocale.en_US\n          }\n        });\n        break;\n      case 'de':\n        moment.locale('de');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Grafischer Editor',\n            codeEditor: 'Code Editor',\n            previewMap: 'Vorschau Karte',\n            language: 'Sprache',\n            compact: 'Kompakt',\n            examples: 'Beispiele',\n            ...GsLocale.de_DE\n          }\n        });\n        break;\n      case 'es':\n        moment.locale('es');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Editor gráfico',\n            codeEditor: 'Editor de código',\n            previewMap: 'Mapa de previsualización',\n            language: 'Idioma',\n            compact: 'Compacto',\n            examples: 'Ejemplos',\n            ...GsLocale.es_ES\n          }\n        });\n        break;\n      case 'ch':\n        moment.locale('zh-cn');\n        this.setState({\n          locale: {\n            graphicalEditor: '图形编辑器',\n            codeEditor: '代码编辑器',\n            previewMap: '预览图',\n            language: '语言',\n            compact: '紧凑',\n            examples: '例子',\n            ...GsLocale.zh_CN\n          }\n        });\n        break;\n      default:\n        moment.locale('en');\n          this.setState({\n            locale: {\n              graphicalEditor: 'Graphical Editor',\n              codeEditor: 'Code Editor',\n              previewMap: 'Preview Map',\n              language: 'Language',\n              compact: 'Compact',\n              examples: 'Examples',\n              ...GsLocale.en_US\n            }\n        });\n        break;\n    }\n  }\n\n  onRuleRendererChange = (e: any) => {\n    const ruleRendererType = e.target.value;\n    this.setState({ruleRendererType});\n  }\n\n  onCompactSwitchChange = (compact: boolean) => {\n    this.setState({compact});\n  }\n\n  onExamplesButtonClicked = () => {\n    const {\n      examplesModalVisible\n    } = this.state;\n    this.setState({\n      examplesModalVisible: !examplesModalVisible\n    });\n  }\n\n  onExampleSelected = (exampleStyle?: GsStyle) => {\n    if (exampleStyle) {\n      this.setState({\n        examplesModalVisible: false,\n        style: exampleStyle\n      })\n    } else {\n      this.setState({\n        examplesModalVisible: false\n      });\n    }\n  }\n\n  public render() {\n    const {\n      examplesModalVisible,\n      locale,\n      style,\n      data,\n      compact,\n      ruleRendererType\n    } = this.state;\n    return (\n      <ConfigProvider locale={locale}>\n        <div className=\"app\">\n          <header className=\"gs-header\">\n            <span className=\"logo-title\">\n              <img className=\"logo\" src={logo} alt=\"logo\"/>\n              <span className=\"app-title\">GeoStyler</span>\n            </span>\n          </header>\n          <div className=\"gs-settings\">\n            <Form layout=\"inline\">\n              <Form.Item label={locale.language}>\n                <RadioGroup\n                  className=\"language-select\"\n                  onChange={this.onLangChange}\n                  defaultValue=\"en\"\n                >\n                  <RadioButton value=\"en\">EN</RadioButton>\n                  <RadioButton value=\"de\">DE</RadioButton>\n                  <RadioButton value=\"es\">ES</RadioButton>\n                  <RadioButton value=\"ch\">中文</RadioButton>\n                </RadioGroup>\n              </Form.Item>\n              <Form.Item label={locale.compact}>\n                <Switch\n                  checked={compact}\n                  onChange={this.onCompactSwitchChange}\n                />\n              </Form.Item>\n              <Form.Item label=\"Symbolizer Renderer\">\n                <RadioGroup\n                  className=\"language-select\"\n                  onChange={this.onRuleRendererChange}\n                  value={ruleRendererType}\n                >\n                  <RadioButton value=\"OpenLayers\">OpenLayers</RadioButton>\n                  <RadioButton value=\"SLD\">SLD</RadioButton>\n                </RadioGroup>\n              </Form.Item>\n              <Form.Item>\n                <StyleLoader\n                  parsers={[\n                    this._sldStyleParser\n                  ]}\n                  onStyleRead={(style: GsStyle) => {\n                    this.setState({style});\n                  }}\n                />\n              </Form.Item>\n              <Form.Item>\n                <DataLoader\n                  parsers={[\n                    this._geoJsonParser,\n                    this._wfsParser,\n                    this._shapefileParser\n                  ]}\n                  onDataRead={(data: GsData) => {\n                    this.setState({data});\n                  }}\n                />\n              </Form.Item>\n              <Form.Item>\n                <Button\n                  onClick={this.onExamplesButtonClicked}\n                >\n                  {locale.examples}\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n          <div className=\"main-content\">\n            <div className=\"gui-wrapper\">\n              <h2>{locale.graphicalEditor}</h2>\n              <Style\n                style={style}\n                data={data}\n                onStyleChange={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n                compact={compact}\n                ruleRendererType={ruleRendererType}\n                sldRendererProps={{\n                  wmsBaseUrl: 'https://ows-demo.terrestris.de/geoserver/ows?',\n                  layer: 'terrestris:bundeslaender'\n                }}\n              />\n            </div>\n            <div className=\"right-wrapper\">\n              <Collapse defaultActiveKey={['code-editor']}>\n                <Collapse.Panel header={locale.codeEditor} key=\"code-editor\">\n                  <CodeEditor\n                    style={style}\n                    parsers={[\n                      this._sldStyleParser,\n                      this._sldStyleParserSE\n                    ]}\n                    defaultParser={this._sldStyleParser}\n                    onStyleChange={(style: GsStyle) => {\n                      this.setState({style});\n                    }}\n                    showSaveButton={true}\n                    showCopyButton={true}\n                  />\n                </Collapse.Panel>\n                <Collapse.Panel header={locale.previewMap} key=\"preview-map\">\n                  <PreviewMap\n                    style={style}\n                    data={data}\n                  />\n                </Collapse.Panel>\n              </Collapse>\n            </div>\n          </div>\n          <ExamplesDialog\n            visible={examplesModalVisible}\n            onOkClicked={this.onExampleSelected}\n            width=\"50%\"\n          />\n        </div>\n      </ConfigProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}